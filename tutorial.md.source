
This tutorial describes most functionality of Firebase-Transactions. We will create an example: 

- First we generate 100 random users with different credits
- Then we generate 1000 random transactions 
- We start transactor and let those transactions be processed

This is not a real-life example: the main difference is, that in real world, transactions
would be put to Firebase from browser - as a result to some user interaction. However, the example
should give you nice overview of what this small library is capable.

Let's start with some setup:
__fragment__(setup)


First, let's start with randomly populating db, this is pretty straightforward.
__fragment__(populate)

Now we create a handler for the 'pay' transaction.
__fragment__(pay)
few things to note here:
- handler's first argument is object containing various firebase read / write functions. Their exact
  description can be found in documentation. Only 'change' and 'read' functions are used by this
  handler.
- All read / set operations work in 'sandboxed' environment; most notably, the effect of write
  operations will be present only after the transaction is comitted.
- after the funds are transferred, we read once again sender's account, check whether the ballance is not negative, and abort
  the transaction if needed. This is not very straight-forward - credit check could be part of
  change() call; however, we did it this way 'because we can' - to illustrate the power of the lib.

Before we submit actual transactions, we must create a client first. Client purpose is just to
allow us to submit transactions. Therefore, client is not an object but rather a simple function.
__fragment__(create_client)

Once we have client, we can use it to submit the transactions:
__fragment__(submit_transactions)

finally, we can start the transactor:
__fragment__(run_transactor)

Open the Firebase admin console and watch, as the users' accounts gets updated and transaction
descriptors are moved to 'closed_transaction'


